/**
 * Messages in Akka Serverless get persisted in protobuf format to
 * save on storage space in. As a best practice you want to split
 * the outbound facing API from the internal state representation.
 * To get you started the fastest, we've put both in this file.
 */

/**
 * Specify the version of the Protobuf syntax
 */
syntax = "proto3";

/**
 * Packages prevent name clashes between protocol messages.
 */
package eventsourced;

/**
 * Imports allow you to use definitions from other protobuf files. In
 * this case:
 * akkaserverless/annotations.proto contains definitions
 * to work with Akka Serverless.
 * google/api/annotations.proto contains definitions to add
 * HTTP based endpoints
 */
import "akkaserverless/annotations.proto";
import "google/api/annotations.proto";

/**
 * The HelloWorldState message is the state that is persisted
 * for the eventsourced entity. The name of the person being
 * greeted will be used as the entity key (unique identifier)
 */
message HelloWorldState {
    string name = 1 [(akkaserverless.field).entity_key = true];
    int32 numOfMessages = 2;
    string greeting = 3;
}

/**
 * The HelloWorldRequest is the input for the Event Sourced Entity
 */
message HelloWorldRequest {
    string name = 1 [(akkaserverless.field).entity_key = true];
}

/**
 * The HelloWorldResponse is the output for the Event Sourced Entity
 */
message HelloWorldResponse {
    string message = 1;
}

/**
 * UpdateStateEvent is emitted when the command handler inside the code
 * is completed. It then emits an event to write the new state into the 
 * event journal. Using this technique, you can replay events to arrive at
 * the exact same state all the time.
 */
message UpdateStateEvent {
    string name = 1 [(akkaserverless.field).entity_key = true];
    string greeting = 3;
}

/**
 * The EventSourcedEntityService shows all rpc methods that are available for this service
 * and how they relate to both the outbound API (based on HTTP) and to your code.
 */ 
service EventSourcedEntityService {
    /**
     * The SayHello method is exposed to the outside world over gRPC and HTTP.
     * The HTTP option exposes a URL `/sayhello` that can be invoked by sending
     * a POST message to that endpoint. The unique identifier, entity key, is a
     * mandatory part of the request
     */
    rpc SayHello(HelloWorldRequest) returns (HelloWorldResponse) {
        option (google.api.http) = {
            post: "/sayhello/{name}",
            body: "*"
        };
    }

    /**
     * The GetGreeting method is exposed to the outside world over gRPC and HTTP.
     * The HTTP option exposes a URL `/getstate` that can be invoked by sending
     * a POST message to that endpoint. The unique identifier, entity key, is a
     * mandatory part of the request and this method returns the current state
     * of the entity.
     */
    rpc GetGreeting(HelloWorldRequest) returns (HelloWorldState) {
        option (google.api.http) = {
            get: "/getstate/{name}"
        };
    }
}